services:
  jobmanager:
    image: ibis-flink
    build: .
    ports:
      - ${FLINK_JOB_MANAGER_PORT}:${FLINK_JOB_MANAGER_PORT}
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
    networks:
      - flink

  taskmanager:
    image: ibis-flink
    build: .
    depends_on:
      - jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2
    networks:
      - flink

  kafka:
    image: confluentinc/cp-kafka:7.5.2
    hostname: kafka
    container_name: kafka
    ports:
      - ${KAFKA_BOOTSTRAP_PORT}:${KAFKA_BOOTSTRAP_PORT}
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_PORT},PLAINTEXT_HOST://localhost:${KAFKA_BOOTSTRAP_PORT}
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:${KAFKA_CONTROLLER_PORT}
      KAFKA_LISTENERS: PLAINTEXT://kafka:${KAFKA_PORT},CONTROLLER://kafka:${KAFKA_CONTROLLER_PORT},PLAINTEXT_HOST://0.0.0.0:${KAFKA_BOOTSTRAP_PORT}
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
    networks:
      - flink

  init-kafka:
    image: confluentinc/cp-kafka:7.5.2
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      sleep 2
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:${KAFKA_PORT} --list

      echo -e 'Creating kafka topics'
      # kafka-topics --bootstrap-server kafka:${KAFKA_PORT} --create --if-not-exists --topic payment_msg --replication-factor 1 --partitions 1
      # kafka-topics --bootstrap-server kafka:${KAFKA_PORT} --create --if-not-exists --topic sink --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:${KAFKA_PORT} --create --if-not-exists --topic transaction --replication-factor 1 --partitions 1
      # kafka-topics --bootstrap-server kafka:${KAFKA_PORT} --create --if-not-exists --topic transaction_sink --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:${KAFKA_PORT} --list
      "
    networks:
      - flink

  data-generator:
    image: ibis-flink-data-generator
    build:
      context: .
      dockerfile: data-generator.Dockerfile
    depends_on:
      - init-kafka
    networks:
      - flink

  influxdb:
    hostname: influxdb
    container_name: influxdb
    image: influxdb:2.3.0
    ports:
      - ${INFLUXDB_PORT}:${INFLUXDB_PORT}
    networks:
      - flink
    command: sh -c "influxd & sleep 5; influx config rm dashboard_config && influx setup --name dashboard_config --username dashboard --password dashboard --token dashboard --org dashboard --bucket dashboard --force; sleep infinity"
    # command: |
    #   "
    #   influxd &
    #   sleep 5
    #   influx config rm dashboard_config && influx setup --name dashboard_config --username dashboard --password dashboard --token dashboard --org dashboard --bucket dashboard --force
    #   sleep infinity
    #   "

  dashboard_w_influxdb:
    hostname: dashboard_w_influxdb
    container_name: dashboard_w_influxdb
    ports:
      - ${DASHBOARD_PORT}:${DASHBOARD_PORT}
    image: dashboard_w_influxdb
    environment:
      KAFKA_SERVICE: kafka
      KAFKA_BOOTSTRAP_PORT: ${KAFKA_PORT}
      KAFKA_SOURCE_TOPIC: ${KAFKA_SOURCE_TOPIC}
      INFLUXDB_SERVICE: influxdb
      INFLUXDB_PORT: ${INFLUXDB_PORT}
      DASHBOARD_PORT: ${DASHBOARD_PORT}
    build:
      context: .
      dockerfile: dashboard_w_influxdb.Dockerfile
      args:
        - DASHBOARD_PORT=${DASHBOARD_PORT}
    depends_on:
      - data-generator
      - init-kafka
      - influxdb
      - kafka
    networks:
      - flink
    restart: on-failure

networks:
  flink:
    driver: bridge
